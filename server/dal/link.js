import { GenerateRandom } from "../utils/utilities.js";

/**
 * A class to represent the "links" collection in the database.
 */
class Link {
    /**
     * Number of characters in the short URL generated.
     */
    static ShortUrlLength = 4;

    /**
     * Constructor to create a new instance of "Link".
     * @param {string} target The target URL mapped to the generated short URL.
     * @param {string} action Nature of action to be carried out when the short url is requested.
     * @param {string} shortUrl Short URL to act as a front for the mapped target URL. 
     * @param {string} userId  unique ID assigned to the user in the database.
     */
    constructor(target, action, shortUrl, userId) {
        this.Target = target.trim();
        this.Action = action.trim();
        this.ShortUrl = shortUrl;
        this.UserId = userId;
    }

    /**
     * Generates a random value and assigns it to the link instance's ShortUrl property.
     */
    RefreshShortUrl() {
        this.ShortUrl = GenerateRandom(Link.ShortUrlLength);
    }

    /**
     * Returns an object representation of the link instance containing only its attributes.
     * @returns {object} Object representation of the instance.
     */
    ToObject() {
        return {
            "UserId": this.UserId,
            "Target": this.Target,
            "Action": this.Action,
            "ShortUrl": this.ShortUrl
        };
    }

    /**
     * Creates a new instance of Link with the given target and action. If
     * @param {string} target The target URL mapped to the generated short URL.
     * @param {string} action Nature of action to be carried out when the short url is requested.
     * @param {string} shortUrl Short URL to act as a front for the mapped target URL. If this is not provided by the user, a random value is generated by the system.
     * @param {string} userId unique ID assigned to the user in the database.
     * @returns {object} containing a new instance of Link.
     */
    static Create(target, action, shortUrl, userId) {
        shortUrl = shortUrl || "";
        shortUrl = shortUrl.trim();
        if(shortUrl == "") {
            shortUrl = GenerateRandom(Link.ShortUrlLength);
        }
        
        return new Link(target, action, shortUrl, userId);
    }
}

export default Link;