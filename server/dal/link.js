import { GenerateRandom, Today } from "../utils/utilities.js";

/**
 * A class to represent the "links" collection in the database.
 */
class Link {
    /**
     * Number of characters required in the short URL, generated by the system.
     */
    static ShortUrlLength = 4;

    /**
     * Constructor to create a new instance of "Link".
     * @param {string} target The target URL mapped to the generated short URL.
     * @param {string} action Nature of action to be carried out when the short url is requested.
     * @param {string} shortUrl Short URL to act as a front for the mapped target URL. 
     * @param {string} userId  unique ID assigned to the user in the database.
     * @param {number} expiry number of days from created date, for which the link is valid.
     */
    constructor(target, action, shortUrl, userId, expiry) {
        this.Target = target.trim();
        this.Action = action.trim();
        this.ShortUrl = shortUrl;
        this.UserId = userId;
        this.Created = Today();
        this.Expiry = expiry;
    }

    /**
     * Generates a random value and assigns it to the link instance's ShortUrl property.
     */
    RefreshShortUrl() {
        this.ShortUrl = GenerateRandom(Link.ShortUrlLength);
    }

    /**
     * Returns an object representation of the link instance containing only its attributes.
     * @returns {object} Object representation of the instance.
     */
    ToJson() {
        return {
            "UserId": this.UserId,
            "Target": this.Target,
            "Action": this.Action,
            "ShortUrl": this.ShortUrl,
            "Created": this.Created,
            "Expiry": this.Expiry
        };
    }

    /**
     * Validates if the link has expired using its creation date and days of expiry.
     * @returns {boolean} true if the link has expired and false if it has not.
     */
    HasExpired() {
        let createdDate = new Date(this.Created);
        let expiryDate = createdDate.setDate(createdDate.getDate() + this.Expiry);
        let today = new Date(Today());
        return today > expiryDate;
    }

    /**
     * Creates a new instance of Link with the given target and action. If
     * @param {string} target The target URL mapped to the generated short URL.
     * @param {string} action Nature of action to be carried out when the short url is requested.
     * @param {string} shortUrl Short URL to act as a front for the mapped target URL. If this is not provided by the user, a random value is generated by the system.
     * @param {string} userId unique ID assigned to the user in the database.
     * @param {number} expiry number of days for which the link is valid (with reference to creation date). 
     * @returns {object} containing a new instance of Link.
     */
    static Create(target, action, shortUrl, userId, expiry) {
        shortUrl = shortUrl || "";
        shortUrl = shortUrl.trim();
        if(shortUrl == "") {
            shortUrl = GenerateRandom(Link.ShortUrlLength);
        }
        
        expiry = expiry || 0;
        return new Link(target, action, shortUrl, userId, expiry);
    }

    /**
     * Creates a new instance of Link from the provided object. 
     * This function is typically used to create Link objects from records returned by the database collection.
     * @param {object} linkObj object containing the link details.
     * @returns {Link} a new instance of User.
     */
    static CreateFrom(linkObj) {
        let { UserId, Target, Action, ShortUrl, Expiry } = linkObj;
        let newLink = new Link(Target, Action, ShortUrl, UserId, Expiry);
        newLink.Created = linkObj.Created;
        return newLink;
    }
}

export default Link;